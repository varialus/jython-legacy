Files in this project:
Python.asdl - zephyr file taken directly from CPython release25-maint
asdl.py - base asdl program copied from CPython release25-maint
asdl_java.py - copied from CPython sandbox for reference
asdl_anltr.py - adapted from asdl_java.py to produce antlr style ast classes
astlip.py - adapted from Jim Baker's ast -> s-expression utility
            it now runs itself and jastlib.py and diffs the results
            run with -h for more options
build.xml - ant file for building the project
crawl - runs only the grammar on a file (note add any second param to get a
        print of the tree) - empty output means a successful walk.
fails - a list of release25 files that fail - slightly outdated
globwalk.py - a recursive globber used by astlib.py
jastlib.py - adapted from astlib.py to produce a reasonable s-expression
             from jython parsing with antlr
regr - a list of release25 files that should succeed - slightly outdated 
       I think there are two new failures I think due to __neg__ on negate
run - runs grammar and walker on a file (note add any second param to get a
      print of the trees) - empty output means a successful walk.
spark.py - copied from CPython -- used by asdl

known bugs:
* The following files in release25 completely blow up astlib.py:
      Lib/stringprep.py
      Lib/test/test_pep263.py
      Lib/test/bad_coding.py
      Lib/test/bad_coding2.py
      Lib/test/badsyntax_nocaret.py
so I generally delete these files before running astlib.py on the whole 
release25 Lib.
* lambda is not working very well.  Currently it uses or_test just so it can
barely work but this prevents nested lambdas.  One problem is the syntactic
predicate in testlist -- it binds too tightly to commas so lambdas like:
  lambda x,y=1: x + y
fail thinking that x=1 is an assignment statement.
* unicode: I am not currently creating PyUnicode for unicode objects (so
u'' in python ends up looking like ''.  Also many of the representations
use lowercase where jython uses upercase.
* float representation: there are differences in float representation like
exponentials use lowercase in cpython but upper in jython -- also the 
number of diplayed digits vary.
* the lexer is dropping ^L currently -- betting that's wrong.
* lexing:
   def blah():foo \

fails -- this shows up in many of the plat_* files with names like IN.py.
It looks like the lexer is absorbing too many end-of-lines.

* parens - parens do not always work the way they should - one example:

(a <= a) is True

incorrectly rolls up as if the statment had been:

a <= a is True

* some string lexing is wrong, for example:
''' antlr thinks this has 4 end apos \''''

