diff --git a/jython/ast/Python.asdl b/jython/ast/Python.asdl
--- a/jython/ast/Python.asdl
+++ b/jython/ast/Python.asdl
@@ -10,8 +10,14 @@
 	    | Suite(stmt* body)
 
 	stmt = FunctionDef(identifier name, arguments args, 
-                            stmt* body, expr* decorator_list)
-	      | ClassDef(identifier name, expr* bases, stmt* body, expr *decorator_list)
+                            stmt* body, expr* decorator_list, expr? returns)
+	      | ClassDef(identifier name,
+	      	         expr* bases,
+			 keyword* keywords,
+			 expr? starargs,
+			 expr? kwargs,
+                         stmt* body,
+			 expr *decorator_list)
 	      | Return(expr? value)
 
 	      | Delete(expr* targets)
@@ -29,6 +35,7 @@
 
 	      -- 'type' is a bad name
 	      | Raise(expr? type, expr? inst, expr? tback)
+	      -- py3k: | Raise(expr? exc, expr? cause)
 	      | TryExcept(stmt* body, excepthandler* handlers, stmt* orelse)
 	      | TryFinally(stmt* body, stmt* finalbody)
 	      | Assert(expr test, expr? msg)
@@ -42,6 +49,7 @@
 	      | Exec(expr body, expr? globals, expr? locals)
 
 	      | Global(identifier* names)
+	      | Nonlocal(identifier* names)
 	      | Expr(expr value)
 	      | Pass | Break | Continue
 
@@ -56,7 +64,10 @@
 	     | Lambda(arguments args, expr body)
 	     | IfExp(expr test, expr body, expr orelse)
 	     | Dict(expr* keys, expr* values)
+	     | Set(expr* elts)
 	     | ListComp(expr elt, comprehension* generators)
+	     | SetComp(expr elt, comprehension* generators)
+	     | DictComp(expr key, expr value, comprehension* generators)
 	     | GeneratorExp(expr elt, comprehension* generators)
 	     -- the grammar constrains where yield expressions can occur
 	     | Yield(expr? value)
@@ -68,13 +79,16 @@
 	     | Repr(expr value)
 	     | Num(object n) -- a number as a PyObject.
 	     | Str(string s) -- need to specify raw, unicode, etc?
+	     | Bytes(string s)
+	     | Ellipsis
 	     -- other literals? bools?
 
 	     -- the following expression can appear in assignment context
 	     | Attribute(expr value, identifier attr, expr_context ctx)
 	     | Subscript(expr value, slice slice, expr_context ctx)
+	     | Starred(expr value, expr_context ctx)
 	     | Name(identifier id, expr_context ctx)
-	     | List(expr* elts, expr_context ctx) 
+	     | List(expr* elts, expr_context ctx)
 	     | Tuple(expr* elts, expr_context ctx)
 
 	      -- col_offset is the byte offset in the utf8 string the parser uses
@@ -82,7 +96,7 @@
 
 	expr_context = Load | Store | Del | AugLoad | AugStore | Param
 
-	slice = Ellipsis | Slice(expr? lower, expr? upper, expr? step) 
+	slice = Slice(expr? lower, expr? upper, expr? step) 
 	      | ExtSlice(slice* dims) 
 	      | Index(expr value) 
 
@@ -99,10 +113,16 @@
 
 	-- not sure what to call the first argument for raise and except
 	excepthandler = ExceptHandler(expr? type, expr? name, stmt* body)
+	-- py3k:      | ExceptHandler(expr? type, identifier? name, stmt* body)
 	                attributes (int lineno, int col_offset)
 
-	arguments = (expr* args, identifier? vararg, 
-		     identifier? kwarg, expr* defaults)
+	--arguments = (expr* args, identifier? vararg, 
+	--	     identifier? kwarg, expr* defaults)
+	arguments = (arg* args, identifier? vararg, expr? varargannotation,
+		     arg* kwolnyargs, identifier? kwarg,
+		     expr? kwargannotation, expr* defaults,
+		     expr* kw_defaults)
+	arg = (identifier arg, expr? annotation)
 
         -- keyword arguments supplied to call
         keyword = (identifier arg, expr value)
