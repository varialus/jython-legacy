// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class Global extends stmtType {
    public String[] names;

    private final static String[] fields = new String[] {"names"};
    public String[] get_fields() { return fields; }

    public Global(String[] names) {
        this.names = names;
    }

    public Global(Token token, String[] names) {
        super(token);
        this.names = names;
    }

    public Global(int ttype, Token token, String[] names) {
        super(ttype, token);
        this.names = names;
    }

    public Global(PythonTree tree, String[] names) {
        super(tree);
        this.names = names;
    }

    public String toString() {
        return "Global";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Global(");
        sb.append("names=");
        sb.append(dumpThis(names));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitGlobal(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
