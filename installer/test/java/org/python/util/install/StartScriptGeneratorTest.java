package org.python.util.install;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import junit.framework.Assert;
import junit.framework.TestCase;

public class StartScriptGeneratorTest extends TestCase {

    private static final String AT_DATE = "@DATE";

    private StartScriptGenerator _generator;

    protected void setUp() throws Exception {
        _generator = new StartScriptGenerator(new File("C:\\target"), new File("C:\\java")); // dummy values here
    }

    public void testUnix() throws IOException {
        _generator.setFlavour(StartScriptGenerator.UNIX_FLAVOUR);
        StringBuffer buf = new StringBuffer(100);
        buf.append("#!/bin/sh\n");
        buf.append("\n");
        buf.append("# This file was generated by the Jython installer\n");
        buf.append("# Created on " + AT_DATE + " by " + System.getProperty("user.name") + "\n");
        buf.append("\n");
        buf.append("CP=\"C:\\target/" + JarInstaller.JYTHON_JAR + "\"\n");
        buf.append("if [ ! -z \"$CLASSPATH\" ]\n"); // quotes around $CLASSPATH are essential for Solaris
        buf.append("then\n");
        buf.append("  CP=$CP:$CLASSPATH\n");
        buf.append("fi\n");
        buf.append("\"C:\\java/bin/java\" -Dpython.home=\"C:\\target\" -classpath \"$CP\" org.python.util.jython \"$@\"\n");
        assertEquals(buf.toString().replaceAll(AT_DATE, new Date().toString()), _generator
                .getJythonScript(StartScriptGenerator.UNIX_FLAVOUR));

        buf = new StringBuffer(50);
        buf.append("#!/bin/sh\n");
        buf.append("\n");
        buf.append("# This file was generated by the Jython installer\n");
        buf.append("# Created on " + AT_DATE + " by " + System.getProperty("user.name") + "\n");
        buf.append("\n");
        buf.append("\"C:\\target/jython\" \"C:\\target/Tools/jythonc/jythonc.py\" \"$@\"\n");
        assertEquals(buf.toString().replaceAll(AT_DATE, new Date().toString()), _generator
                .getJythoncScript(StartScriptGenerator.UNIX_FLAVOUR));
    }

    public void testWindows() throws IOException {
        StringBuffer winBuf = new StringBuffer(100);
        winBuf.append("@echo off\n");
        winBuf.append("rem This file was generated by the Jython installer\n");
        winBuf.append("rem Created on " + AT_DATE + " by " + System.getProperty("user.name") + "\n");
        winBuf.append("\n");
        winBuf.append("set ARGS=\n");
        winBuf.append("\n");
        winBuf.append(":loop\n");
        winBuf.append("if [%1] == [] goto end\n");
        winBuf.append("    set ARGS=%ARGS% %1\n");
        winBuf.append("    shift\n");
        winBuf.append("    goto loop\n");
        winBuf.append(":end\n");
        winBuf.append("\n");

        _generator.setFlavour(StartScriptGenerator.WINDOWS_FLAVOUR);
        StringBuffer buf = new StringBuffer(100);
        buf.append(winBuf);
        buf.append("\"C:\\java\\bin\\java.exe\" -Dpython.home=\"C:\\target\" -classpath \"C:\\target\\"
                + JarInstaller.JYTHON_JAR + ";%CLASSPATH%\" org.python.util.jython %ARGS%\n");
        assertEquals(buf.toString().replaceAll(AT_DATE, new Date().toString()), _generator
                .getJythonScript(StartScriptGenerator.WINDOWS_FLAVOUR));

        buf = new StringBuffer(100);
        buf.append(winBuf);
        buf.append("\"C:\\target\\jython.bat\" \"C:\\target\\Tools\\jythonc\\jythonc.py\" %ARGS%\n");
        assertEquals(buf.toString().replaceAll(AT_DATE, new Date().toString()), _generator
                .getJythoncScript(StartScriptGenerator.WINDOWS_FLAVOUR));
    }

    public void testFlavour() {
        int expectedFlavour;

        expectedFlavour = StartScriptGenerator.UNIX_FLAVOUR;
        _generator.setFlavour(expectedFlavour);
        assertEquals(expectedFlavour, _generator.getFlavour());

        expectedFlavour = StartScriptGenerator.BOTH_FLAVOUR;
        _generator.setFlavour(expectedFlavour);
        assertEquals(expectedFlavour, _generator.getFlavour());

        TestStartScriptGenerator testGenerator = new TestStartScriptGenerator(new File("dummy"), new File("dummy"),
                false);
        expectedFlavour = StartScriptGenerator.WINDOWS_FLAVOUR;
        testGenerator.setFlavour(expectedFlavour);
        assertEquals(expectedFlavour, testGenerator.getFlavour());
        expectedFlavour = StartScriptGenerator.UNIX_FLAVOUR;
        testGenerator.setFlavour(expectedFlavour);
        assertEquals(expectedFlavour, testGenerator.getFlavour());

        testGenerator = new TestStartScriptGenerator(new File("dummy"), new File("dummy"), true);
        testGenerator.setFlavour(StartScriptGenerator.WINDOWS_FLAVOUR);
        assertEquals(StartScriptGenerator.BOTH_FLAVOUR, testGenerator.getFlavour());
    }

    public void testGenerateBothFlavours() throws IOException {
        File dir = new File(System.getProperty("java.io.tmpdir"), "StartScriptGeneratorTest");
        try {
            if (!dir.exists()) {
                assertTrue(dir.mkdirs());
            }
            File javaHome = new File(System.getProperty("java.home"));
            TestStartScriptGenerator testGenerator = new TestStartScriptGenerator(dir, javaHome, true);
            // test generator constructor timing problem: do set the flavour once again
            testGenerator.setFlavour(StartScriptGenerator.WINDOWS_FLAVOUR);
            testGenerator.generateStartScripts();
            String[] fileNames = dir.list();
            assertEquals(4, fileNames.length);
            Set fileNamesSet = new HashSet(4);
            for (int i = 0; i < fileNames.length; i++) {
                fileNamesSet.add(fileNames[i]);
            }
            assertTrue(fileNamesSet.contains("jython"));
            assertTrue(fileNamesSet.contains("jython.bat"));
            assertTrue(fileNamesSet.contains("jythonc"));
            assertTrue(fileNamesSet.contains("jythonc.bat"));
        } finally {
            if (dir.exists()) {
                rmdir(dir);
            }
        }
    }

    private void rmdir(File dir) {
        File[] files = dir.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                Assert.assertTrue(files[i].delete());
            } else {
                if (files[i].isDirectory()) {
                    rmdir(files[i]);
                }
            }
        }
        assertTrue(dir.delete());
    }

    class TestStartScriptGenerator extends StartScriptGenerator {
        private boolean _hasBothFlavours;

        public TestStartScriptGenerator(File targetDirectory, File javaHome, boolean hasBothFlavours) {
            super(targetDirectory, javaHome);
            _hasBothFlavours = hasBothFlavours;
        }

        protected boolean hasUnixlikeShell() {
            return _hasBothFlavours;
        }
    }
    
}
