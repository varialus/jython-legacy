==============
Jython Roadmap
==============
February 7, 2007

-------------------
Jython  2.2
-------------------

A first beta has been released towards Jython-2.2.  A second beta is
needed to address a couple remaining issues in the new-style class integration:

1. The tool output from Pedroni's program referenced at
http://sourceforge.net/mailarchive/message.php?msg_id=37797385
shows several differences between Jython's type hierarchy and that of
CPython's as well as highlighting the lack of many of the
rich-comparision operators on our built-in types.  Both of these need
to be fixed before beta 2.

2. We need to get more of test_descr working.  Charlie Groves has 
created bug reports for most of the remaining work for test_descr.

Once those two items are resolved, a second beta will be released, and
then we'll move on to the release of 2.2 final.  For 2.2 we will not be
considering much beyond these problems.  Bugs will be looked at on a
case by case basis and many will not be fixed for 2.2.  Jython in its
current state is quite fragile, and fixing one bug often leads to many
more.

--------------------------
Jython 2.3/2.4 or even 2.5
--------------------------

Jython's current fragility means that the next release will primarily
be a cleanup release.  We will probably target
either Python 2.3/2.4, although we might even consider 2.5, as it would
be great to catch up, and the changes in the core language in the 2.x
series at this point are fairly small.

We have noticed that the current codebase is
extremely brittle and uses way to many different styles to do many of
the same things.  All of this inconsistency makes bugfixing a
nightmare, and makes learning the codebase from scratch
extraordinarily difficult.

This means that, at least for the core developers, we will be
concentrated on making a clean 2.3/2.4, while improving the java
integration, but will not be spending much time trying to get CPython
frameworks working.  Also, we will not be considering any big changes
to the core (such as using ASM for bytecode generation) and will not
be considering code changes just to improve performance.

This does not mean that I want to discourage experimentation with
CPython frameworks.  I think after we have done some house cleaning
that CPython frameworks are the next target.  I'm just saying that
this will not be the focus of the next release.  Making the codebase
more consistent and accessible will be the primary focus.

Of course, once we have a 2.3/2.4 release, then we can really look at
the issues above (CPython frameworks, performance, big changes to the
core, etc) and I believe we will have a much better chance for
success.

---------------
Next Jython 2.x
---------------

This release will build on the cleanup in the last release, and in this
release we will be able to consider performance enhancements, CPython
frameworks, and other considerations that where shelved for the last
release.

----------
Jython 3.0
----------

Jython 3.0 (or Jython 3000 to denote the likely year of appearance) 
will, like CPython 3.0, be a backwards incompatible version that can
include radical departures from Jython 2.x.  The departures will at
least include the departures that CPython 3.0 has made (for example,
old-style classes go away, ints and longs are completely unified,
etc.)

Serious discussions about Jython 3.0 can perhaps begin once CPython 3.0
goes to a GA release.  I think that is all I am willing to say on the 
subject for now.

